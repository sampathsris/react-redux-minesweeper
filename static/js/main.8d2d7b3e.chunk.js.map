{"version":3,"sources":["feature/board/reducer.js","feature/board/index.js","feature/board/actions.js","feature/controls/index.js","feature/controls/actions.js","App.js","config/store.js","index.js"],"names":["DEFAULT_ROWS","DEFAULT_COLUMNS","BOMB_THRESHOLD","defaultCell","hasBomb","exploded","collapsed","marked","initialState","rows","columns","populated","cells","createCells","i","cell","push","getNeighborIndexes","_ref","index","neighbors","notLeftEdge","notRightEdge","notTopEdge","notBottomEdge","getBombCounts","state","counts","Array","length","fill","forEach","neighborIndex","changeCell","action","cellHandler","newCell","Object","objectSpread","slice","concat","changeCells","map","collapseBoard","getNextMark","mark","collapseCell","nextCell","explodeCell","handleMouseEvent","fn","e","preventDefault","getBombCountColor","bombCount","CollapsedCellContent","react_default","a","createElement","style","color","BoardCell","_ref2","handleClick","handleRightClick","cursor","className","onClick","onContextMenu","connect","bombCounts","board","type","_ref3","cellRows","cellRow","_loop","j","assign","key","resetBoard","index_es","variant","App","Fragment","CssBaseline_default","controls","Component","rootReducer","combineReducers","arguments","undefined","nextState","nextCells","p","Math","random","plantBombs","startIndex","toBeCollapsed","recursiveSearch","nextBatch","indexOf","searchAndCollapseSafeCells","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8d2d7b3e.chunk.js","sourcesContent":["\r\nconst DEFAULT_ROWS = 10\r\nconst DEFAULT_COLUMNS = 10\r\nconst BOMB_THRESHOLD = 0.85\r\n\r\nconst defaultCell = {\r\n    hasBomb: false,\r\n    exploded: false,\r\n    collapsed: false,\r\n    marked: ' ',\r\n}\r\n\r\nconst initialState = initDefault()\r\n\r\nfunction initDefault() {\r\n    return {\r\n        rows: DEFAULT_ROWS,\r\n        columns: DEFAULT_COLUMNS,\r\n        populated: false,\r\n        cells: createCells(DEFAULT_ROWS, DEFAULT_COLUMNS)\r\n    };\r\n}\r\n\r\nfunction createCells(rows, columns) {\r\n    let cells = []\r\n\r\n    for (let i = 0; i < rows * columns; i++) {\r\n        let cell = defaultCell\r\n\r\n        cells.push(cell)\r\n    }\r\n\r\n    return cells\r\n}\r\n\r\nfunction getNeighborIndexes({rows, columns}, index) {\r\n    let neighbors = []\r\n\r\n    let notLeftEdge = (index % rows) !== 0\r\n    let notRightEdge = (index % rows) !== (rows - 1)\r\n    let notTopEdge = (index > columns)\r\n    let notBottomEdge = (index < rows * columns - columns)\r\n\r\n    if (notLeftEdge && notTopEdge)     { neighbors.push(index - columns - 1) }\r\n    if (notTopEdge)                    { neighbors.push(index - columns    ) }\r\n    if (notRightEdge && notTopEdge)    { neighbors.push(index - columns + 1) }\r\n    if (notLeftEdge)                   { neighbors.push(index - 1          ) }\r\n    if (notRightEdge)                  { neighbors.push(index + 1          ) }\r\n    if (notLeftEdge && notBottomEdge)  { neighbors.push(index + columns - 1) }\r\n    if (notBottomEdge)                 { neighbors.push(index + columns    ) }\r\n    if (notRightEdge && notBottomEdge) { neighbors.push(index + columns + 1) }\r\n\r\n    return neighbors\r\n}\r\n\r\nexport function getBombCounts(state) {\r\n    let {cells} = state\r\n    let counts = (new Array(cells.length)).fill(0)\r\n\r\n    cells.forEach((cell, index) => {\r\n        if (cell.hasBomb) {\r\n            getNeighborIndexes(state, index).forEach(neighborIndex => counts[neighborIndex]++)\r\n        }\r\n    })\r\n\r\n    return counts\r\n}\r\n\r\nexport default function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'COLLAPSE_CELL':\r\n            let nextState = changeCell(state, action, collapseCell)\r\n\r\n            if (!state.populated) {\r\n                nextState = plantBombs(nextState)\r\n            }\r\n\r\n            if (nextState.cells[action.index].exploded) {\r\n                nextState = collapseBoard(nextState)\r\n            }\r\n\r\n            nextState = searchAndCollapseSafeCells(nextState, action.index)\r\n            \r\n            return nextState\r\n\r\n        case 'EXPLODE_CELL':\r\n            return changeCell(state, action, explodeCell)\r\n\r\n        case 'TOGGLE_MARK_CELL':\r\n            return changeCell(state, action, cell => {\r\n                if (cell.collapsed) {\r\n                    return cell\r\n                }\r\n\r\n                return {\r\n                    ...cell,\r\n                    marked: getNextMark(cell.marked)\r\n                }\r\n            })\r\n\r\n        case 'COLLAPSE_BOARD':\r\n            return collapseBoard(state)\r\n\r\n        case 'RESET_BOARD':\r\n            return resetBoard(state)\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction changeCell(state, action, cellHandler) {\r\n    let { index } = action\r\n    let cell = state.cells[index]\r\n    let newCell = cellHandler(cell)\r\n\r\n    if (cell === newCell) {\r\n        return state\r\n    }\r\n\r\n    return {\r\n        ...state,\r\n        cells:\r\n            state.cells.slice(0, index)\r\n            .concat([newCell])\r\n            .concat(state.cells.slice(index + 1))\r\n    }\r\n}\r\n\r\nfunction changeCells(state, cellHandler) {\r\n    return {\r\n        ...state,\r\n        cells: state.cells.map(cellHandler)\r\n    }\r\n}\r\n\r\nfunction searchAndCollapseSafeCells(state, startIndex) {\r\n    let bombCounts = getBombCounts(state)\r\n    let toBeCollapsed = []\r\n\r\n    if (bombCounts[startIndex] !== 0) {\r\n        return state\r\n    }\r\n\r\n    function recursiveSearch(index) {\r\n        let nextBatch = []\r\n\r\n        getNeighborIndexes(state, index).forEach(neighborIndex => {\r\n            let cell = state.cells[neighborIndex]\r\n            \r\n            if (toBeCollapsed.indexOf(neighborIndex) < 0 &&\r\n                !cell.collapsed && !cell.hasBomb)\r\n            {\r\n                if (bombCounts[neighborIndex] === 0) {\r\n                    nextBatch.push(neighborIndex)\r\n                }\r\n\r\n                toBeCollapsed.push(neighborIndex)\r\n            }\r\n        })\r\n\r\n        nextBatch.forEach(recursiveSearch)\r\n    }\r\n\r\n    recursiveSearch(startIndex)\r\n\r\n    return changeCells(state, (cell, index) => {\r\n        if (toBeCollapsed.indexOf(index) >= 0) {\r\n            return {\r\n                ...cell,\r\n                collapsed: true\r\n            }\r\n        } else {\r\n            return cell\r\n        }\r\n    })\r\n}\r\n\r\nfunction plantBombs(state) {\r\n    let nextCells = state.cells.map(cell => {\r\n        if (cell.collapsed) {\r\n            return cell\r\n        }\r\n\r\n        let p = Math.random()\r\n\r\n        return {\r\n            ...cell,\r\n            hasBomb: p > BOMB_THRESHOLD\r\n        }\r\n    })\r\n\r\n    let nextState = {\r\n        ...state,\r\n        populated: true,\r\n        cells: nextCells,\r\n    }\r\n\r\n    return nextState\r\n}\r\n\r\nfunction collapseBoard(state) {\r\n    return {\r\n        ...state,\r\n        cells: state.cells.map(cell => ({\r\n            ...cell,\r\n            collapsed: true\r\n        }))\r\n    }\r\n}\r\n\r\nfunction getNextMark(mark) {\r\n    switch (mark) {\r\n        case ' ': return '🚩'\r\n        case '🚩': return '❓'\r\n        case '❓': return ' '\r\n        default: return ' '\r\n    }\r\n}\r\n\r\nfunction collapseCell(cell) {\r\n    if (cell.collapsed) {\r\n        return cell\r\n    }\r\n\r\n    let nextCell = {\r\n        ...cell,\r\n        collapsed: true\r\n    }\r\n\r\n    if (nextCell.hasBomb) {\r\n        nextCell = explodeCell(nextCell)\r\n    }\r\n\r\n    return nextCell\r\n}\r\n\r\nfunction explodeCell(cell) {\r\n    if (cell.exploded) {\r\n        return cell\r\n    }\r\n\r\n    let nextCell = {\r\n        ...cell,\r\n        exploded: true\r\n    }\r\n\r\n    return nextCell\r\n}\r\n\r\nfunction resetBoard(state) {\r\n    return {\r\n        ...changeCells(state, () => defaultCell),\r\n        populated: false\r\n    }\r\n}","\r\nimport React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './styles.css'\r\nimport { toggleMarkCell, collapseCell } from './actions';\r\nimport { getBombCounts } from './reducer';\r\n\r\nconst handleMouseEvent = (fn) => e => {\r\n    e.preventDefault()\r\n    fn()\r\n}\r\n\r\nfunction getBombCountColor(bombCount) {\r\n    switch (bombCount) {\r\n        case 1: return 'grey'\r\n        case 2: return 'navy'\r\n        case 3: return 'blue'\r\n        case 4: return 'green'\r\n        case 5: return 'gold'\r\n        case 6: return 'orange'\r\n        case 7: return 'red'\r\n        case 8: return 'brown'\r\n        default: return ''\r\n    }\r\n}\r\n\r\nfunction CollapsedCellContent({\r\n    hasBomb, exploded, bombCount\r\n}) {\r\n    return (\r\n        hasBomb\r\n            ? <span>\r\n              {exploded ? '💥' : '💣'}\r\n              </span>\r\n            : <span style={{color: getBombCountColor(bombCount)}}>\r\n              {bombCount === 0 ? '' : bombCount}\r\n              </span>\r\n    )\r\n}\r\n\r\nfunction BoardCell({\r\n    hasBomb, exploded, collapsed, marked, bombCount,\r\n    handleClick, handleRightClick\r\n}) {\r\n    let cursor = (!collapsed) || (collapsed && hasBomb && (!exploded))\r\n        ? 'pointer' : 'default'\r\n    let className = `board-cell ${collapsed ? 'collapsed' : 'uncollapsed'}`\r\n    \r\n    return (\r\n        <td\r\n            className={className}\r\n            style={{ cursor }}\r\n            onClick={handleMouseEvent(handleClick)}\r\n            onContextMenu={handleMouseEvent(handleRightClick)}\r\n        >\r\n        {\r\n            collapsed\r\n                ? <CollapsedCellContent {...{hasBomb, exploded, bombCount}} />\r\n                : marked\r\n        }\r\n        </td>\r\n    )\r\n}\r\n\r\nfunction Board({\r\n    rows, columns, cells, handleClick, handleRightClick\r\n}) {    \r\n    let cellRows = []\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n        let cellRow = []\r\n\r\n        for (let j = 0; j < columns; j++) {\r\n            let index = i * rows + j\r\n            cellRow.push(\r\n                <BoardCell key={j}\r\n                    {...cells[index]}\r\n                    handleClick={() => handleClick(index)}\r\n                    handleRightClick={() => handleRightClick(index)}\r\n                />\r\n            )\r\n        }\r\n\r\n        cellRows.push(<tr key={i}>{cellRow}</tr>)\r\n    }\r\n\r\n    return (\r\n        <table className=\"board\">\r\n            <tbody>{cellRows}</tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    let bombCounts = getBombCounts(state.board)\r\n\r\n    return {\r\n        ...state.board,\r\n        cells: state.board.cells.map((cell, index) => ({\r\n            ...cell,\r\n            bombCount: bombCounts[index],\r\n        }))\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        handleClick: collapseCell,\r\n        handleRightClick: toggleMarkCell,\r\n    }\r\n)(Board)\r\n","\r\nexport function toggleMarkCell(index) {\r\n    return {\r\n        type: 'TOGGLE_MARK_CELL',\r\n        index,\r\n    }\r\n}\r\n\r\nexport function collapseCell(index) {\r\n    return {\r\n        type: 'COLLAPSE_CELL',\r\n        index,\r\n    }\r\n}\r\n\r\nexport function collapseBoard() {\r\n    return {\r\n        type: 'COLLAPSE_BOARD'\r\n    }\r\n}\r\n","\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport './styles.css'\r\nimport { resetBoard } from './actions';\r\n\r\nfunction Controls({\r\n    resetBoard\r\n}) {\r\n    return (\r\n        <div className=\"controls\">\r\n            <Button variant=\"outlined\" color=\"secondary\" onClick={resetBoard}>\r\n                Reset\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    {\r\n        resetBoard\r\n    }\r\n)(Controls)\r\n","\r\nexport function resetBoard() {\r\n    return {\r\n        type: 'RESET_BOARD'\r\n    }\r\n}\r\n","\nimport React, { Component } from 'react'\nimport Board from './feature/board'\nimport Controls from './feature/controls';\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <CssBaseline />\n        <Board />\n        <Controls />\n      </>\n    )\n  }\n}\n\nexport default App;\n","\r\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport boardReducer from '../feature/board/reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    board: boardReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport './index.css'\nimport App from './App'\nimport store from './config/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}